[
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "isExtraImport": true,
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "Prio_queue",
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "isExtraImport": true,
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "isExtraImport": true,
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "isExtraImport": true,
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "customtkinter",
        "description": "customtkinter",
        "isExtraImport": true,
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "customtkinter",
        "description": "customtkinter",
        "isExtraImport": true,
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "isExtraImport": true,
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "peekOfCode": "class Node:\n    def __init__(self,state,goal_cost=0,heuristic_cost=0, parent=None, depth=0, explored=0,action=set()):\n        self.state = state\n        self.gx = goal_cost\n        self.hx = heuristic_cost\n        self.parent = parent\n        self.depth = depth\n        self.explored = explored\n        self.action = action\n    def __repr__(self):",
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "Problem",
        "kind": 6,
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "peekOfCode": "class Problem:\n    def __init__(self,initial_state, goal_state):\n        self.initial_state = initial_state\n        self.goal_state = goal_state\n    @abstractmethod\n    def actions(self, state):\n        \"\"\"\n        Return the list of actions that can be executed in the given state.\n        \"\"\"\n        pass",
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "WolfGoatCabbage",
        "kind": 6,
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "peekOfCode": "class WolfGoatCabbage(Problem):\n    \"\"\" The problem of a farmer, trying to cross a river with his wolf, goat and cabbage\n    with the use of a row boat that only fits the farmer and 1 item. If the wolf is ever left\n    alone with the goat, it will eat it. If the goat is left with the cabbage, it will eat it.\n    The problem is seperated in two sets, left and right, to illustrate the left and right bank of the river.\n    \"\"\"\n    def __init__(self, initial_state, goal_state=Node((sorted(tuple()),sorted(tuple({\"Cabbage\", \"Farmer\",\"Goat\",\"Wolf\"}))))):\n        super().__init__(Node(initial_state), goal_state)\n    def __repr__(self):\n        return \"------Wolf Goat Cabbage problem------\"",
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "EightProblem",
        "kind": 6,
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "peekOfCode": "class EightProblem(Problem):\n    \"\"\"\n    Problem: Eight Puzzle\n    Returns: List of states from initial to goal.\n    \"\"\"\n    def __init__(self,initial_state, goal_state=Node([[1,2,3], [4,5,6], [7,8,0]],0,0, None)):\n        super().__init__(Node(initial_state,0,0,None), goal_state)\n        self.width = 3\n    def __repr__(self):\n        return \"------Eight Puzzle problem------\"",
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "Search_Algorithms",
        "kind": 6,
        "importPath": "python_files.algorithms",
        "description": "python_files.algorithms",
        "peekOfCode": "class Search_Algorithms:\n    def __init__(self, problem):\n        self.problem = problem\n        self.count = 0\n    def Search_algorithm(self, queue=Queue, heuristic=False, cost=False):\n        frontier = queue()\n        visited = set()\n        frontier.enqueue(self.problem.initial_state)\n        while not frontier.is_empty():\n            self.count += 1",
        "detail": "python_files.algorithms",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def enqueue(self, node):\n        self.stack.append(node)\n    def dequeue(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n    def is_empty(self):",
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, node):\n        self.queue.append(node)\n    def dequeue(self):\n        if self.is_empty():\n            return None\n        return self.queue.pop(0)\n    def is_empty(self):",
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "Prio_queue",
        "kind": 6,
        "importPath": "python_files.containers",
        "description": "python_files.containers",
        "peekOfCode": "class Prio_queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, node):\n        heappush(self.queue, (node.fx(), node))\n    def dequeue(self):\n        return heappop(self.queue)[1]\n    def is_empty(self):\n        return len(self.queue) == 0\n    def printqueue(self):",
        "detail": "python_files.containers",
        "documentation": {}
    },
    {
        "label": "GUI",
        "kind": 6,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "class GUI(CTk):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Initializing window\n        \"\"\"\n        super().__init__(*args, **kwargs, )\n        self.geometry(\"1000x800\")\n        self.title(\"Search Algorithms Visualizer\")\n        self.grid_columnconfigure((0,1,2,3,4), weight=1, uniform=\"a\")\n        self.grid_rowconfigure(0,weight=1, uniform=\"a\")",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "def main():\n    app = GUI()\n    setup_thread = threading.Thread(target=app.mainloop())\n    setup_thread.start()\n    app.mainloop()\nif __name__ == main():\n    main()",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "theme_path",
        "kind": 5,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "theme_path = \"C:\\\\Users\\\\bager\\\\OneDrive\\\\Projects\\\\Search_algorithms_visualizer\\\\theme\\\\Hades.json\"\nset_default_color_theme(theme_path)\n\"\"\"\ninit states for Eight Puzzle\n\"\"\"\ngoal_state = [[1,2,3],\n              [4,5,6],\n              [7,8,\"\"]]\nclass GUI(CTk):\n    def __init__(self, *args, **kwargs):",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "goal_state",
        "kind": 5,
        "importPath": "gui_test",
        "description": "gui_test",
        "peekOfCode": "goal_state = [[1,2,3],\n              [4,5,6],\n              [7,8,\"\"]]\nclass GUI(CTk):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Initializing window\n        \"\"\"\n        super().__init__(*args, **kwargs, )\n        self.geometry(\"1000x800\")",
        "detail": "gui_test",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "tempCodeRunnerFile",
        "description": "tempCodeRunnerFile",
        "peekOfCode": "error = CTkToplevel(self)\n            error.title(\"Error\")\n            error.geometry(\"300x200\")\n            error_text = CTkLabel(error, text=\"You Chose Poorly\\n Inversion prohibited\")\n            error_text.pack(padx=5, pady=5)\n            close_button = CTkButton(error, text=\"Close\", command=error.destroy)\n            close_button.pack(pady=10)",
        "detail": "tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "inversion_counter",
        "kind": 2,
        "importPath": "Testing_inversion_counter",
        "description": "Testing_inversion_counter",
        "peekOfCode": "def inversion_counter(array):\n    number_of_inversion = 0\n    for i in range(len(array)):\n        index = i + 1\n        for j in range(index,len(array)):\n            print(array[i], array[j])\n            if array[i] == array[j] or array[j] == 0 or array[i] == 0:\n                continue\n            elif array[i] > array[j]:\n                number_of_inversion += 1",
        "detail": "Testing_inversion_counter",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Testing_inversion_counter",
        "description": "Testing_inversion_counter",
        "peekOfCode": "array = [1,2,5,4,8,7,6,0,3]\ntest = inversion_counter(array)\nprint(test)",
        "detail": "Testing_inversion_counter",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "Testing_inversion_counter",
        "description": "Testing_inversion_counter",
        "peekOfCode": "test = inversion_counter(array)\nprint(test)",
        "detail": "Testing_inversion_counter",
        "documentation": {}
    },
    {
        "label": "GUI",
        "kind": 6,
        "importPath": "test_with_label",
        "description": "test_with_label",
        "peekOfCode": "class GUI(CTk):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Initializing window\n        \"\"\"\n        super().__init__(*args, **kwargs, )\n        self.geometry(\"1000x800\")\n        self.grid_rowconfigure((0,1),weight=1,uniform=\"a\")\n        self.grid_columnconfigure((0,1), weight=1, uniform=\"a\")\n        self.label1 = CTkLabel(self, text=\"Hey\", font=(None, 20))",
        "detail": "test_with_label",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_with_label",
        "description": "test_with_label",
        "peekOfCode": "def main():\n    theme_path = os.path.expanduser(\"theme/Hades.json\")\n    set_default_color_theme(theme_path)\n    app = GUI()\n    setup_thread = threading.Thread(target=app.mainloop())\n    setup_thread.start()\n    app.mainloop()\nif __name__ == main():\n    main()",
        "detail": "test_with_label",
        "documentation": {}
    }
]